function [Electrodes, Params, StimTimes, LFP, AnalogIn, hasError, errorMsg] ...
    = loadExperiment(dataDir, animalID, unit, fileName, fileType)

if nargin < 5 || isempty(fileType)
    fileType = 'unsorted';
end

[~, fileName, ~] = fileparts(fileName);
[~, fileNo, stimType] = parseFileName(fileName);
fileName = createFileName(animalID, fileNo, stimType);
unitNo = str2num(unit(5:end));
dataPath = fullfile(dataDir, animalID, unit, filesep);
filePath = fullfile(dataPath,[fileName,'.mat']);

% Make sure some variables exist in case they are non-existent in the file
Electrodes = [];
Params = [];
StimTimes = [];
LFP = [];
AnalogIn = [];

% Load the file
if ~exist(filePath)
    warning(['No data for ', fileName]);
    hasError = 2;
    return;
end
load(filePath);

% Check data
switch fileType
    case 'unsorted'
        % Check Ripple spikes
        if ~exist('dataset','var')
            warning(['No data for ', fileName]);
            hasError = 2;
            return;
        end
        if ~isfield(dataset,'spike')
            warning(['No spikes for ', fileName]);
            hasError = 2;
            return;
        end
        
        
        
        % Check params
        if ~isfield(dataset,'Params')  || ~isfield(Params,'Data')
            warning(['Missing Params for ', fileName]);
            hasError = 2;
            return;
        end
        
        % Check LFP
        if ~isfield(dataset,'lfp')
            % Attempt to convert from ripple
            warning(['No LFP for ', fileName]);
            hasError = 2;
            return;
        end
        
        % Check Analog
        if ~isfield(dataset,'analog1k')
            % Attempt to convert from ripple
            warning(['No analog data for ', fileName]);
            hasError = 2;
            return;
        end
       
        
        % Check Events
        if ~isfield(dataset,'digital')
            warning(['No digital events for ', fileName]);
            hasError = 2;
            return;
        end
        
        % Convert everything into a nice format
        spikes = [dataset.spike.time', dataset.spike.unitid'];
        waveforms = [dataset.spike.time', dataset.spike.unitid' dataset.spike.data'];
        name = sprintf('elec %d', dataset.spike.electrodeid);
        number = dataset.spike.electrodeid;
        Electrodes = table(spikes, waveforms, name, number);
        LFP.endTime = dataset.lfp.time(2);
        LFP.samplerate = dataset.lfp.fs;
        name = sprintf('lfp %d', dataset.lfp.electrodeid);
        number = dataset.lfp.electrodeid;
        data = mat2cell(dataset.lfp.data, size(dataset.lfp.data,1), repmat(1, 1, size(dataset.lfp.data,2)))';
        LFP.Channels = table(data, name, number);
        AnalogIn.endTime = dataset.analog1k.time(2);
        AnalogIn.samplerate = dataset.analog1k.fs;
        name = sprintf('analog %d', dataset.analog1k.electrodeid);
        number = dataset.analog1k.electrodeid;
        data = mat2cell(dataset.analog1k.data, size(dataset.analog1k.data,1), repmat(1, 1, size(dataset.analog1k.data,2)))';
        AnalogIn.Channels = table(data, name, number);
        
        Events.startTime = dataset.digital.data(dataset.digital.channel == 'SMA 4');
        Events.endTime = dataset.digital.data(dataset.digital.channel == 'SMA 3');
        Events.parallelInput = [ddataset.digital.data(dataset.digital.channel == 'SMA 3');
     
    otherwise
        warning('Unsupported filetype');
        hasError = 2;
        return;
end



% Adjust StimTimes
StimTimes = Events.StimTimes;
StimTimes.matlab = Params.StimTimes;

Params.unitNo = unitNo;
[stimOnTimes, stimOffTimes, source, latency, variation, hasError, errorMsg] = ...
    adjustStimTimes(Params, Events);

StimTimes.on = stimOnTimes;
StimTimes.off = stimOffTimes;
StimTimes.latency = latency;
StimTimes.variation = variation;
StimTimes.source = source;

end